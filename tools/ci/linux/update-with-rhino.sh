#!/bin/sh

# the script to sync with rhino
# this script should be executed when rhino released new version.

RHINO_REPO="https://github.com/mozilla/rhino.git"
pr_label="rhino-sync-pr"

shallow_fetch_branch() {
  git remote set-branches --add "$1" "$2"
  git fetch "$@"
}

main() {
  set -eu
  move_package_kts="tools/ci/linux/MovePackage-back.kts"
  cp tools/ci/linux/MovePackage.kts "$move_package_kts"
  git checkout rhino-master
  git remote add rhino "$RHINO_REPO"
  shallow_fetch_branch rhino master
  git reset --hard rhino/master
  git remote rm rhino
  git push origin rhino-master
  if [ "$(git rev-parse master)" = "$(git rev-parse rhino-master)" ]; then
    echo "already up to date!"
    return 0;
  fi

  rhino_hash="$(git rev-parse --short rhino-master)"
  branch_name="sync-rhino-$rhino_hash"

  git branch "$branch_name"
  git checkout "$branch_name"

  # configure committer
  git config --local user.name "github-actions[bot]"
  git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"

  kotlinc-jvm -script "$move_package_kts" run-and-commit

  # merge to modified-rhino
  git checkout modified-rhino
  git merge "$branch_name" --no-edit
  git branch -d "$branch_name"

  # push them
  git push origin modified-rhino rhino-master

  body=$(cat <<EOF
sync rhino to $rhino_hash.
this PR is generated by github actions.
EOF
)

  # close exists sync pr
  gh pr list --base 'master' --label "$pr_label" \
    | cut -d"$(printf '\t')" -f1 \
    | xargs -L1 gh pr close -d

  gh pr create \
    --base master \
    --head "$branch_name" \
    --label "$pr_label" \
    --title "sync rhino to $rhino_hash" \
    --body "$body" \
    --fill
}

main
