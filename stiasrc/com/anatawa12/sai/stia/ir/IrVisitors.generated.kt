/**
 * Generated by IrNode.kts
 * Do not modify manually
 */

package com.anatawa12.sai.stia.ir
abstract class IrExpressionVisitor<out R, in T> {
    fun visitBinaryOperator(node: IrBinaryOperator, arg: T): R = visitExpression(node, arg)
    fun visitUnaryOperator(node: IrUnaryOperator, arg: T): R = visitExpression(node, arg)
    fun visitGetProperty(node: IrGetProperty, arg: T): R = visitExpression(node, arg)
    fun visitSetProperty(node: IrSetProperty, arg: T): R = visitExpression(node, arg)
    fun visitNewOrCall(node: IrNewOrCall, arg: T): R = visitExpression(node, arg)
    fun visitCommaExpr(node: IrCommaExpr, arg: T): R = visitExpression(node, arg)
    fun visitConditional(node: IrConditional, arg: T): R = visitExpression(node, arg)
    fun visitSetName(node: IrSetName, arg: T): R = visitExpression(node, arg)
    fun visitGetName(node: IrGetName, arg: T): R = visitExpression(node, arg)
    fun visitConvertException(node: IrConvertException, arg: T): R = visitExpression(node, arg)
    fun visitNumberLiteral(node: IrNumberLiteral, arg: T): R = visitExpression(node, arg)
    fun visitStringLiteral(node: IrStringLiteral, arg: T): R = visitExpression(node, arg)
    fun visitNullLiteral(node: IrNullLiteral, arg: T): R = visitExpression(node, arg)
    fun visitBooleanLiteral(node: IrBooleanLiteral, arg: T): R = visitExpression(node, arg)
    fun visitRegexpLiteral(node: IrRegexpLiteral, arg: T): R = visitExpression(node, arg)
abstract fun visitExpression(node: IrExpression, arg: T): R
}

abstract class IrStatementVisitor<out R, in T> {
    fun visitJumpTarget(node: IrJumpTarget, arg: T): R = visitStatement(node, arg)
    fun visitReturn(node: IrReturn, arg: T): R = visitStatement(node, arg)
    fun visitGoto(node: IrGoto, arg: T): R = visitStatement(node, arg)
    fun visitJsr(node: IrJsr, arg: T): R = visitStatement(node, arg)
    fun visitIfFalse(node: IrIfFalse, arg: T): R = visitStatement(node, arg)
    fun visitIfTrue(node: IrIfTrue, arg: T): R = visitStatement(node, arg)
    fun visitBreak(node: IrBreak, arg: T): R = visitStatement(node, arg)
    fun visitContinue(node: IrContinue, arg: T): R = visitStatement(node, arg)
    fun visitSwitch(node: IrSwitch, arg: T): R = visitStatement(node, arg)
    fun visitVariableDecl(node: IrVariableDecl, arg: T): R = visitStatement(node, arg)
    fun visitThrow(node: IrThrow, arg: T): R = visitStatement(node, arg)
    fun visitRethrow(node: IrRethrow, arg: T): R = visitStatement(node, arg)
    fun visitEmptyStatement(node: IrEmptyStatement, arg: T): R = visitStatement(node, arg)
    fun visitExpressionStatement(node: IrExpressionStatement, arg: T): R = visitStatement(node, arg)
    fun visitFunctionStatement(node: IrFunctionStatement, arg: T): R = visitStatement(node, arg)
    fun visitInternalScope(node: IrInternalScope, arg: T): R = visitStatement(node, arg)
    fun visitBlock(node: IrBlock, arg: T): R = visitStatement(node, arg)
    fun visitScope(node: IrScope, arg: T): R = visitStatement(node, arg)
abstract fun visitStatement(node: IrStatement, arg: T): R
}
